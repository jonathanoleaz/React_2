{"version":3,"sources":["components/card-list/card/card-component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","Searchbox","placeholder","handleChange","type","onChange","App","state","searchField","bind","fetch","then","response","json","users","setState","e","this","target","value","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iVAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAOL,EAAMI,QAAQE,QACrB,4BAAKN,EAAMI,QAAQG,YCAdC,EAAW,SAACR,GAAD,OACpB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCApBM,G,MAAY,SAAC,GAAD,IAAIC,EAAJ,EAAIA,YAAaC,EAAjB,EAAiBA,aAAjB,OACrB,uBACIC,KAAK,SACLF,YAAcA,EACdX,UAAU,SACVc,SAAWF,MC2CJG,E,kDApDX,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAWf,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBAfT,E,qDAmBb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEhB,SAAUe,S,0BAI3C,SAAaE,GACXC,KAAKF,SAAS,CAAEP,YAAaQ,EAAEE,OAAOC,U,oBAKxC,WACE,MAAkCF,KAAKV,MAA/BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,YACZY,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASf,EAAYc,kBAElD,OACE,sBAAK/B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAcc,KAAKd,eAErB,cAAC,EAAD,CAAUJ,SAAUqB,W,GA9CVI,aCOLC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.313141b2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set3&size=180x180`}/>\r\n        <h1> { props.monster.name }</h1>\r\n        <p>{ props.monster.email }</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card-list/card/card-component'\r\n\r\n/**key  property is needed because React needs to identify which element of the array change if an element would change (Unidirectional data flow), \r\n * and to avoid render all the array, in other words, it is to render only the modified element.*/\r\n\r\nexport const CardList = (props) =>(\r\n    <div className=\"card-list\">\r\n        {\r\n            props.monsters.map(monster => \r\n              <Card key={monster.id} monster={monster}/>\r\n            )}\r\n    </div>\r\n)","import React from 'react';\r\nimport './search-box.styles.css';\r\n/**\r\n * \r\n * Functional components: they don't have access to state because they don't have access to constructor\r\n * nor lifecycle methods.\r\n * \r\n * We don not set the state of the component in this component because of the dataflow, which must be in only one: from top to the bottom, \r\n * in other words, because state needs to be known by the cardlist component. This is known as 'Lifting state up'.\r\n * \r\n */\r\nexport const Searchbox = ( { placeholder, handleChange } ) => (\r\n    <input \r\n        type='search' \r\n        placeholder= {placeholder}\r\n        className=\"search\" \r\n        onChange={ handleChange }/>\r\n)","import './App.css';\nimport React, {Component} from \"react\";\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {Searchbox} from \"./components/search-box/search-box.component\";\n\n  class App extends Component{\n\n    constructor(){\n      super();\n      this.state = {\n        monsters: [],\n        searchField: ''\n      };\n\n      /**\n       * We define the context of the fuction 'handleChange' because the functions that arent overloaded, \n       * need to be defined an explicit context. This is not required if the function is and arrow function, for example, the followinf will work:\n       * handleClick3 = () => console.log(this);\n       * \n       * A rule in React is:\n       * Use arrow functions on any class methods we define and aren't part of React (like render(), componentDidMount())\n       */\n      this.handleChange = this.handleChange.bind(this);\n\n    }\n\n    componentDidMount(){\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n    }\n\n\n    handleChange(e){\n      this.setState({ searchField: e.target.value });\n\n    }\n\n    \n    render() {\n      const { monsters, searchField } = this.state;\n      const filteredMonsters = monsters.filter(monster =>\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n        )\n      return (\n        <div className=\"App\">\n          <h1>Monsters app test</h1>\n          <Searchbox\n            placeholder=\"Search monsters\"\n            handleChange={this.handleChange}\n          />\n          <CardList monsters={filteredMonsters}/>\n          \n        </div>\n      );\n    }\n  }\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}